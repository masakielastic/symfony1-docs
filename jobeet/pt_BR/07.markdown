Dia 7: Brincando com a Página da Categoria
==========================================

Ontem, você aumentou seu conhecimento do symfony em várias áreas diferentes:
fazendo buscas com o ##ORM##, fixtures, rotas, depuração e configurações
personalizadas. E terminamos com um pequeno desafio para começarmos hoje.

Esperamos que você tenha trabalhado no página da categoria do Jobeet assim o
dia de hoje será muito mais valioso para você.

Pronto, vamos falar sobre uma possível implementação.

A Rota da Categoria
-------------------

Primeiro, precisamos adicionar uma rota que defina uma URL amigável para a
página da categoria. Coloque-a no início do arquivo de roteamento:

    [yml]
    # apps/frontend/config/routing.yml
    category:
      url:      /category/:slug
      class:    sfPropelRoute
      param:    { module: category, action: show }
      options:  { model: JobeetCategory, type: object }

>**TIP**
>Sempre que você começar a implementação de uma nova funcionalidade, é uma boa
>prática pensar sobre a URL e criar a rota associada. E isso é obrigatório se
>tiver removido as regras de roteamento padrões.

Uma rota pode usar qualquer coluna de seu objeto relacionado como um parâmetro.
Ela também pode usar qualquer outro valor se existir um método "accessor"
relacionado definido na classe do objeto. Devido ao parâmetro `slug` não ter
nenhuma coluna correspondente na tabela `category`, precisamos adicionar um
"accessor" virtual em `JobeetCategory` para fazer com que a rota funcione:

    [php]
<propel>
    // lib/model/JobeetCategory.php
</propel>
<doctrine>
    // lib/model/doctrine/JobeetCategory.class.php
</doctrine>
    public function getSlug()
    {
      return Jobeet::slugify($this->getName());
    }

O Link Categoria
----------------

Agora, edite o template `indexSuccess.php` do módulo `job` para adicionar um
link para a página da categoria:

    [php]
    <!-- algum código HTML -->

            <h1>
              <?php echo link_to($category, 'category', $category) ?>
            </h1>

    <!-- algum código HTML -->

          </table>

          <?php if (($count = $category->countActiveJobs() -
              ➥ sfConfig::get('app_max_jobs_on_homepage')) > 0): ?>
            <div class="more_jobs">
              and <?php echo link_to($count, 'category', $category) ?>
              more...
            </div>
          <?php endif; ?>
        </div>
      <?php endforeach; ?>
    </div>

Nós adicionaremos links apenas se existirem mais de 10 empregos para mostrar na
categoria atual. O link contém o número de empregos não mostrados. Para esse
template funcionar, precisamos adicionar o método `countActiveJobs()` em
`JobeetCategory`:

<propel>
    [php]
    // lib/model/JobeetCategory.php
    public function countActiveJobs()
    {
      $criteria = new Criteria();
      $criteria->add(JobeetJobPeer::CATEGORY_ID, $this->getId());

      return JobeetJobPeer::countActiveJobs($criteria);
    }

O método `countActiveJobs()` usa um método `countActiveJobs()` que não existe
ainda em `JobeetJobPeer`. Substitua o conteúdo do arquivo `JobeetJobPeer.php`
com o seguinte código:
</propel>
<doctrine>
    [php]
    // lib/model/doctrine/JobeetCategory.class.php
    public function countActiveJobs()
    {
      $q = Doctrine_Query::create()
        ->from('JobeetJob j')
        ->where('j.category_id = ?', $this->getId());

      return Doctrine_Core::getTable('JobeetJob')->countActiveJobs($q);
    }

O método `countActiveJobs()` usa um método `countActiveJobs()` que não existe
ainda em `JobeetJobTable`. Substitua o conteúdo do arquivo `JobeetJobTable.php`
com o seguinte código:
</doctrine>

<propel>
    [php]
    // lib/model/JobeetJobPeer.php
    class JobeetJobPeer extends BaseJobeetJobPeer
    {
      static public function getActiveJobs(Criteria $criteria = null)
      {
        return self::doSelect(self::addActiveJobsCriteria($criteria));
      }

      static public function countActiveJobs(Criteria $criteria = null)
      {
        return self::doCount(self::addActiveJobsCriteria($criteria));
      }

      static public function addActiveJobsCriteria(Criteria $criteria = null)
      {
        if (is_null($criteria))
        {
          $criteria = new Criteria();
        }

        $criteria->add(self::EXPIRES_AT, time(), Criteria::GREATER_THAN);
        $criteria->addDescendingOrderByColumn(self::CREATED_AT);

        return $criteria;
      }

      static public function doSelectActive(Criteria $criteria)
      {
        return self::doSelectOne(self::addActiveJobsCriteria($criteria));
      }
    }

Como você mesmo pode ver, refatoramos todo o código de `JobeetJobPeer` para
introduzir um novo método compartilhado `addActiveJobsCriteria()` para deixar
o código mais [DRY(Don't Repeat
Yourself)](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself).
</propel>
<doctrine>
    [php]
    // lib/model/doctrine/JobeetJobTable.class.php
    class JobeetJobTable extends Doctrine_Table
    {
      public function retrieveActiveJob(Doctrine_Query $q)
      {
        return $this->addActiveJobsQuery($q)->fetchOne();
      }

      public function getActiveJobs(Doctrine_Query $q = null)
      {
        return $this->addActiveJobsQuery($q)->execute();
      }

      public function countActiveJobs(Doctrine_Query $q = null)
      {
        return $this->addActiveJobsQuery($q)->count();
      }

      public function addActiveJobsQuery(Doctrine_Query $q = null)
      {
        if (is_null($q))
        {
          $q = Doctrine_Query::create()
            ->from('JobeetJob j');
        }

        $alias = $q->getRootAlias();

        $q->andWhere($alias . '.expires_at > ?', date('Y-m-d H:i:s', time()))
          ->addOrderBy($alias . '.created_at DESC');

        return $q;
      }
    }

Como você mesmo pode ver, refatoramos todo o código de `JobeetJobTable` para
introduzir um novo método compartilhado `addActiveJobsCriteria()` para deixar
o código mais [DRY(Don't Repeat
Yourself)](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself).
</doctrine>

>**TIP**
>Na primeira vez que um trecho de código é reutilizado, copiar o código pode
>ser suficiente. Mas se você encontrar outro uso para ele, você precisará
>refatorar, todos as utilizações para uma função ou método compartilhado,
>como fizemos aqui.

<propel>
No método `countActiveJobs()`, em vez de usar `doSelect()` e depois contar o
número de resultados, usamos o método `doCount()` que é muito mais rápido.
</propel>
<doctrine>
No método `countActiveJobs()`, em vez de usar `execute()` e depois contar o
número de resultados, usamos o método `count()` que é muito mais rápido.
</doctrine>

Mudamos vários dos arquivos, apenas para essa simples funcionalidade. Mas cada
vez que adicionamos algum código tentamos colocá-lo na camada correta da
aplicação e também tentamos deixar o código reutilizável. Nesse processo,
também refatoramos alguns códigos existentes. Esse é o fluxo de trabalho típico
quando trabalhamos num projeto symfony. Na próxima cópia de tela estamos
mostrando 5 empregos para deixá-lo curto, você deve visualizar 10 (veja a
configuração `max_jobs_on_homepage`):

![Página Inicial](http://www.symfony-project.org/images/jobeet/1_4/07/homepage.png)

Criação do Módulo Categoria do Emprego
--------------------------------------

É hora de criar o módulo `category`:

    $ php symfony generate:module frontend category

Se você criou um módulo, você provavelmente usou o comando
`propel:generate-module`. Ele até funciona mas como não vamos precisar de 90%
do código gerado, eu usei o comando `generate:module` que cria um módulo
vazio.

>**TIP**
>Porque não adicionar uma action `category` no módulo `job`? Nós poderíamos,
>mas como o assunto principal da página categoria é uma categoria, parece mais
>natural criar um módulo `category` dedicado.

Quando acessar a página da categoria, a rota `category` terá que encontrar a
categoria associada com a variável `slug` da requisição. Mas como o slug não é
guardado no banco de dados e como não podemos deduzir o nome da categoria a
partir do slug, não tem jeito de encontrar a categoria associada com o slug.

Atualize o Banco de Dados
-------------------------

Nós precisamos adicionar a coluna `slug` na tabela `category`:

<propel>
    [yml]
    # config/schema.yml
    propel:
      jobeet_category:
        id:           ~
        name:         { type: varchar(255), required: true }
        slug:         { type: varchar(255), required: true, index: unique }
</propel>
<doctrine>
A coluna `slug` pode ser tratada por um behavior do Doctrine chamado
`Sluggable`. Nós simplesmente precisamos habilitar o behavior no nosso model
`JobeetCategory` e ele irá tomar conta de tudo para você.

    [yml]
    # config/doctrine/schema.yml
    JobeetCategory:
      actAs:
        Timestampable: ~
        Sluggable:
          fields: [name]
      columns:
        name:
          type: string(255)
          notnull:  true

</doctrine>

Agora que `slug` é uma coluna de verdade, você tem que remover o método
`getSlug()` de `JobeetCategory`.

<propel>
Cada vez que o nome da `category` muda, também precisamos computar e mudar o
`slug`. Vamos sobrescrever o método `setName()`:

    [php]
    // lib/model/JobeetCategory.php
    public function setName($name)
    {
      parent::setName($name);

      $this->setSlug(Jobeet::slugify($name));
    }
</propel>
<doctrine>
>**NOTE**
>A configuração da coluna slug é tratada automaticamente quando você salva um
>registro. O slug é montado usando o valor do campo `name` e colocado no
>objeto.
</doctrine>

Use o comando `propel:build --all --and-load` para atualizar as tabelas do
banco de dados e repopular o banco com nossos fixtures:

    $ php symfony propel:build --all --and-load --no-confirmation

Agora nós temos tudo no lugar para criar o método `executeShow()`. Substitua
o conteúdo do arquivo de actions `category` com o seguinte código:

    [php]
    // apps/frontend/modules/category/actions/actions.class.php
    class categoryActions extends sfActions
    {
      public function executeShow(sfWebRequest $request)
      {
        $this->category = $this->getRoute()->getObject();
      }
    }

>**NOTE**
>Como nós removemos o método gerado `executeIndex()`, você também pode remover
>o template gerado automaticamente `indexSuccess.php`
>(`apps/frontend/modules/category/templates/indexSuccess.php`).

O último passo é criar o template `showSuccess.php`:

    [php]
    // apps/frontend/modules/category/templates/showSuccess.php
    <?php use_stylesheet('jobs.css') ?>

    <?php slot('title', sprintf('Jobs in the %s category', $category->getName())) ?>

    <div class="category">
      <div class="feed">
        <a href="">Feed</a>
      </div>
      <h1><?php echo $category ?></h1>
    </div>

    <table class="jobs">
      <?php foreach ($category->getActiveJobs() as $i => $job): ?>
        <tr class="<?php echo fmod($i, 2) ? 'even' : 'odd' ?>">
          <td class="location">
            <?php echo $job->getLocation() ?>
          </td>
          <td class="position">
            <?php echo link_to($job->getPosition(), 'job_show_user', $job) ?>
          </td>
          <td class="company">
            <?php echo $job->getCompany() ?>
          </td>
        </tr>
      <?php endforeach; ?>
    </table>

Templates Parciais
------------------

Perceba que nós copiamos e colamos a tag `<table>` que cria uma lista de
empregos no template de empregos `indexSuccess.php`. Isso é ruim. Hora de
aprender um novo truque. Quando você precisar de alguma parte de um template,
você tem que criar um **Template Parcial**. Um parcial é um trecho de código de
um template que pode ser compartilhado entre vários templates. Um parcial é
apenas mais um template que inicia com um sublinhado (`_`).

Crie o arquivo `_list.php`:

    [php]
    // apps/frontend/modules/job/templates/_list.php
    <table class="jobs">
      <?php foreach ($jobs as $i => $job): ?>
        <tr class="<?php echo fmod($i, 2) ? 'even' : 'odd' ?>">
          <td class="location">
            <?php echo $job->getLocation() ?>
          </td>
          <td class="position">
            <?php echo link_to($job->getPosition(), 'job_show_user', $job) ?>
          </td>
          <td class="company">
            <?php echo $job->getCompany() ?>
          </td>
        </tr>
      <?php endforeach; ?>
    </table>

Você pode incluir um parcial usando o helper `include_partial()`:

    [php]
    <?php include_partial('job/list', array('jobs' => $jobs)) ?>

O primeiro argumento no `include_partial()` é o nome do parcial (o nome do
módulo, uma `/` e o nome do parcial sem o `_` inicial). O segundo argumento é
um array de variáveis a serem passadas ao parcial.

>**NOTE**
>Por que não usar o método `include()` do PHP em vez do helper
>`include_partial()`? A principal diferença entre os dois é o suporte a cache
>embutido no helper `include_partial()`.

Substitua o código HTML `<table>` de ambos os templates pela chamada à
`include_partial()`:

    [php]
    // in apps/frontend/modules/job/templates/indexSuccess.php
    <?php include_partial('job/list', array('jobs' => $category->getActiveJobs(sfConfig::get('app_max_jobs_on_homepage')))) ?>

    // in apps/frontend/modules/category/templates/showSuccess.php
    <?php include_partial('job/list', array('jobs' => $category->getActiveJobs())) ?>

Paginação da Lista
------------------

Dos requisitos do segundo dia:

  "A lista é paginada com 20 empregos por página."
  
Para paginar uma lista de objetos ##ORM##, o symfony fornece uma classe
dedicada:
[`sfPropelPager`](http://www.symfony-project.org/api/1_4/sfPropelPager). Na
action `category`, em vez de passar os objetos emprego para o template
`showSuccess`, passamos um paginador:

    [php]
    // apps/frontend/modules/category/actions/actions.class.php
    public function executeShow(sfWebRequest $request)
    {
      $this->category = $this->getRoute()->getObject();

      $this->pager = new sfPropelPager(
        'JobeetJob',
        sfConfig::get('app_max_jobs_on_category')
      );
<propel>
      $this->pager->setCriteria($this->category->getActiveJobsCriteria());
</propel>
<doctrine>
      $this->pager->setQuery($this->category->getActiveJobsQuery());
</doctrine>
      $this->pager->setPage($request->getParameter('page', 1));
      $this->pager->init();
    }

>**TIP**
>O método `sfRequest::getParameter()` recebe um valor padrão como segundo
>argumento. Na action acima, se o parâmetro `page` da requisição não existir
>então `getParameter()` retornará `1`.

O construtor `sfPropelPager` recebe uma classe model e o número máximo de itens
para retornar por página. Adicione o último valor no seu arquivo de
configuração:

    [yml]
    # apps/frontend/config/app.yml
    all:
      active_days:          30
      max_jobs_on_homepage: 10
      max_jobs_on_category: 20

<propel>
O método `sfPropelPager::setCriteria()` recebe um objeto `Criteria` para usar
quando estiver selecionando itens do banco de dados.
</propel>
<doctrine>
O método `sfDoctrinePager::setQuery()` recebe um objeto `Doctrine_Query` para
usar quando estiver selecionando itens do banco de dados.
</doctrine>

<propel>
Adicione o método `getActiveJobsCriteria()`:
</propel>
<doctrine>
Adicione o método `getActiveJobsQuery()`:
</doctrine>

<propel>
    [php]
    // lib/model/JobeetCategory.php
    public function getActiveJobsCriteria()
    {
      $criteria = new Criteria();
      $criteria->add(JobeetJobPeer::CATEGORY_ID, $this->getId());

      return JobeetJobPeer::addActiveJobsCriteria($criteria);
    }
</propel>
<doctrine>
    [php]
    // lib/model/doctrine/JobeetCategory.class.php
    public function getActiveJobsQuery()
    {
      $q = Doctrine_Query::create()
        ->from('JobeetJob j')
        ->where('j.category_id = ?', $this->getId());

      return Doctrine_Core::getTable('JobeetJob')->addActiveJobsQuery($q);
    }
</doctrine>

<propel>
Agora que você definiu o método `getActiveJobsCriteria()`, podemos refatorar
outros métodos `JobeetCategory` para usá-lo:
</propel>
<doctrine>
Agora que você definiu o método `getActiveJobsQuery()`, podemos refatorar
outros métodos `JobeetCategory` para usá-lo:
</doctrine>

<propel>
    [php]
    // lib/model/JobeetCategory.php
    public function getActiveJobs($max = 10)
    {
      $criteria = $this->getActiveJobsCriteria();
      $criteria->setLimit($max);

      return JobeetJobPeer::doSelect($criteria);
    }

    public function countActiveJobs()
    {
      $criteria = $this->getActiveJobsCriteria();

      return JobeetJobPeer::doCount($criteria);
    }
</propel>
<doctrine>
    [php]
    // lib/model/doctrine/JobeetCategory.class.php
    public function getActiveJobs($max = 10)
    {
      $q = $this->getActiveJobsQuery()
        ->limit($max);

      return $q->execute();
    }

    public function countActiveJobs()
    {
      return $this->getActiveJobsQuery()->count();
    }
</doctrine>

Finalmente, vamos atualizar o template:

    [php]
    <!-- apps/frontend/modules/category/templates/showSuccess.php -->
    <?php use_stylesheet('jobs.css') ?>

    <?php slot('title', sprintf('Jobs in the %s category', $category->getName())) ?>

    <div class="category">
      <div class="feed">
        <a href="">Feed</a>
      </div>
      <h1><?php echo $category ?></h1>
    </div>

    <?php include_partial('job/list', array('jobs' => $pager->getResults())) ?>

    <?php if ($pager->haveToPaginate()): ?>
      <div class="pagination">
        <a href="<?php echo url_for('category', $category) ?>?page=1">
          <img src="/images/first.png" alt="First page" title="First page" />
        </a>

        <a href="<?php echo url_for('category', $category) ?>?page=<?php echo $pager->getPreviousPage() ?>">
          <img src="/images/previous.png" alt="Previous page" title="Previous page" />
        </a>

        <?php foreach ($pager->getLinks() as $page): ?>
          <?php if ($page == $pager->getPage()): ?>
            <?php echo $page ?>
          <?php else: ?>
            <a href="<?php echo url_for('category', $category) ?>?page=<?php echo $page ?>"><?php echo $page ?></a>
          <?php endif; ?>
        <?php endforeach; ?>

        <a href="<?php echo url_for('category', $category) ?>?page=<?php echo $pager->getNextPage() ?>">
          <img src="/images/next.png" alt="Next page" title="Next page" />
        </a>

        <a href="<?php echo url_for('category', $category) ?>?page=<?php echo $pager->getLastPage() ?>">
          <img src="/images/last.png" alt="Last page" title="Last page" />
        </a>
      </div>
    <?php endif; ?>

    <div class="pagination_desc">
      <strong><?php echo count($pager) ?></strong> jobs in this category

      <?php if ($pager->haveToPaginate()): ?>
        - page <strong><?php echo $pager->getPage() ?>/<?php echo $pager->getLastPage() ?></strong>
      <?php endif; ?>
    </div>

A maior parte desse código lida com links para outras páginas. Aqui vai uma
lista dos métodos `sfPropelPager` usados no template:

  * `getResults()`: Retorna um array de objetos ##ORM## para a página atual
  * `getNbResults()`: Retorna o número total de resultados
  * `haveToPaginate()`: Retorna `true` se existir mais de uma página
  * `getLinks()`: Retorna a lista de links de páginas a mostrar
  * `getPage()`: Retorna o número da página atual
  * `getPreviousPage()`: Retorna o número da página anterior
  * `getNextPage()`: Retorna o número da próxima página
  * `getLastPage()`: Retorna o número da última página

Como o `sfPropelPager` também implementa as interfaces `Iterator` e
`Countable`, você pode usar a função `count()` para pegar o número de
resultados em vez do método `getNbResults()`.

![Paginação](http://www.symfony-project.org/images/jobeet/1_4/07/pagination.png)

Considerações Finais
--------------------

Se você trabalhou na sua própria implementação no dia 6 e sentiu que não
aprendeu muito aqui, isso significa que você está se acostumando com a filosofia
do symfony. O processo de adicionar uma nova funcionalidade em um site feito em
symfony é sempre o mesmo: pense sobre as URLs, cria algumas actions, atualize
o model e escreva alguns templates. E, se puder aplicar algumas boas
práticas de desenvolvimento nessa mistura, você se tornará um mestre no symfony
bem rápido.

Amanhã será o início de uma nova semana para o Jobeet. Para celebrar, iremos
falar sobre um tópico novo: testes automatizados.

Feedback
--------
>**Dica - pt_BR**
>Este capítulo foi traduzido por **Rogerio Prado de Jesus**. 
>Se encontrar algum erro que deseja corrigir ou quiser fazer algum comentário
>não deixe de enviar um e-mail para **rogeriopradoj [at] gmail.com**

>**Tip - en**
>This chapter was translated by **Rogerio Prado Jesus**.
>If you find any errors to be corrected or you have any comments
>do not hesitate to send an email to **rogeriopradoj [at] gmail.com**


__ORM__
